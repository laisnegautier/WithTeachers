@page "/{RoomId}"
@layout Videoboard

@inject IModalService Modal
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ApplicationUserService ApplicationUserService
@inject VideoconferenceService VideoconferenceService

@if (userHasJoinedVideoconference)
{
    <Videos Videoconference="@videoconference" User="@userJoiningTheVideoconference" />
}
else
{
    <div class="centered-div">
        @if (!videoconferenceExists(RoomId))
        {
            <h1>Page not found</h1>
            <p>There is nothing associated with the URL.</p>
            <button class="btn">Go to home page</button>
        }
        else
        {
            @if (videoconference.IsHost(currentUser))
            {
                <h1><strong>@videoconference.Title</strong> videoconference</h1>
                <ul class="list-unstyled">
                    <li>Hosted by <strong>@videoconference.User.UserName</strong></li>
                    <li>Scheduled for <strong>@videoconference.ScheduledFor.ToShortTimeString(), @videoconference.ScheduledFor.ToShortDateString()</strong></li>
                    <li>Length: @videoconference.TimeSpan.ToString(@"hh\:mm")</li>
                    <li>Description: @videoconference.Description</li>
                </ul>

                @if (videoconference.IsOngoing)
                {
                    JoinVideoconferenceAsHost();
                }
                else
                {
                    <button class="btn" @onclick="JoinVideoconferenceAsHostAsync">Start the videoconference</button>
                }
            }
            else
            {
                <h1><strong>@videoconference.Title</strong> videoconference</h1>
                <ul class="list-unstyled">
                    <li>Hosted by <strong>@videoconference.User.UserName</strong></li>
                    <li>Scheduled for <strong>@videoconference.ScheduledFor.ToShortTimeString(), @videoconference.ScheduledFor.ToShortDateString()</strong></li>
                    <li>Length: @videoconference.TimeSpan.ToString(@"hh\:mm")</li>
                    <li>Description: @videoconference.Description</li>
                </ul>

                @if (videoconference.IsCompleted)
                {
                    <div class="alert alert-info"><p>This videoconference has <strong>finished</strong>.</p></div>
                }
                else if (videoconference.HasToOccurLater)
                {
                    <div class="alert alert-info"><p>This videoconference has <strong>not begun yet</strong>.</p></div>
                }
                else if (videoconference.IsOngoing)
                {
                    @if (videoconference.HasPassword && !videoconference.PasswordIsCorrect(inputVideoconferencePassword))
                    {
                        <div class="alert alert-info mb-3"><p>A <strong>password</strong> is needed to access the videoconference.</p></div>

                        <div class="form-inline">
                            <input type="password" class="form-control text-center mb-3 mb-sm-0 mr-2" @bind="inputVideoconferencePassword" placeholder="Enter the password to join" autofocus />
                            <button class="btn">Submit</button>
                        </div>
                    }
                    else
                    {
                        //here it's just another user of the platform but not the one who created the videoconf so we don't ask for other name
                        @if (currentUser != null)
                        {
                            <button class="btn" @onclick="JoinVideoconferenceAsGuest">Join as @currentUser.UserName</button>
                        }
                        else
                        {
                            <div class="form-inline">
                                <input type="text" class="form-control text-center mb-3 mb-sm-0 mr-2" @oninput="InputGuestName" placeholder="Write your name" autofocus />
                                @*<button class="btn" @onclick="@(() => JoinVideoconferenceAsGuestAsync(inputGuestName))" disabled="@(String.IsNullOrEmpty(inputGuestName))">Join</button>*@
                                <a href="Identity/Account/LoginShort?userName=@inputGuestName&returnUrl=/@RoomId" class="mr-3">JoinTest</a>
                            </div>

                            @if (!String.IsNullOrEmpty(inputGuestName))
                            {
                                if (userExists)
                                {
                                    <p>CA EXISTE DEJA t'es sur que tu veux te connecter avec?</p>
                                }
                                else
                                {
                                    <p><b>ALL GOOD</b></p>
                                }
                            }
                        }
                    }
                }
            }
        }
    </div>
}

@code {
    [Parameter]
    public string RoomId { get; set; }

    ApplicationUser currentUser;
    Videoconference videoconference;
    string inputVideoconferencePassword;
    string inputGuestName;
    bool userExists;

    // Once connected to the videoconference
    bool userHasJoinedVideoconference = false;
    ApplicationUser userJoiningTheVideoconference; //can be the host, a connected guest or an anonymous guest

    protected override async Task OnInitializedAsync()
    {
        currentUser = await ApplicationUserService.GetCurrentUser();

        if (!String.IsNullOrEmpty(RoomId))
            videoconference = await VideoconferenceService.GetByRoomAsync(RoomId);
    }

    private bool videoconferenceExists(string roomId)
        => videoconference != null;

    private void JoinVideoconferenceAsHost()
    {
        userHasJoinedVideoconference = true;
        userJoiningTheVideoconference = currentUser;
        StateHasChanged();
    }

    private async Task JoinVideoconferenceAsHostAsync()
    {
        userHasJoinedVideoconference = true;
        userJoiningTheVideoconference = currentUser;
        videoconference.IsOngoing = true;
        await VideoconferenceService.UpdateAsync(videoconference);
        StateHasChanged();
    }

    private void JoinVideoconferenceAsGuest()
    {
        userHasJoinedVideoconference = true;
        StateHasChanged();
    }

    private async Task InputGuestName(ChangeEventArgs args)
    {
        inputGuestName = args.Value.ToString();
        await UserExistsAsync(inputGuestName);
    }

    private async Task UserExistsAsync(string userName)
    {
        ApplicationUser user = await ApplicationUserService.GetUserByName(userName);
        userExists = user != null;
    }
}
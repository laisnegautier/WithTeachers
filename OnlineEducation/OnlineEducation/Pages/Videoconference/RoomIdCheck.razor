@page "/{RoomId}"
@layout Videoboard

@inject ApplicationUserService ApplicationUserService
@inject VideoconferenceService VideoconferenceService
@inject NavigationManager NavigationManager
@* STRUCTURE (c = condition)
    c1. userHasJoin?
            -Yes: display videoconference
            -No: c2. roomId in Uri is correct? (initializedAsync)
                    -No: Page not found
                    -Yes: c3. Is the connected user the host/creator of the videoconference?
                            -Yes: c4. Is the videoconference ongoing?
                                    -Yes: Rejoin (IT MEANS NECESSARILY THAT THE HOST LEFT PREVIOUSLY THE ROOM -disconnection or error)
                                    -No: Start it
                            -No: c5. Is the videoconference ongoing?
                                    -No: error message saying it will happen or already happened
                                    -Yes: c6. Does the videoconference needs a password to access the room and the password entered is not yet correct?
                                            -Yes: Display the form to write this password
                                            -No: c7. Is the visitor already connected?
                                                    -Yes: Button to join with login/username. NB: it cannot be the host at this point
                                                    -No: Registration process which will reload this page
*@

@if (userHasJoinedVideoconference)
{
    <Videos Videoconference="@videoconference" />
}
else
{
    <div class="centered-div">
        @if (!videoconferenceExists(RoomId))
        {
            <h1>Page not found</h1>
            <p>There is nothing associated with the URL.</p>
            <button class="btn">Go to home page</button>
        }
        else
        {
            <h1><strong>@videoconference.Title</strong> videoconference</h1>
            <ul class="list-unstyled">
                <li>Hosted by <strong>@videoconference.User.UserName</strong></li>
                <li>Scheduled for <strong>@videoconference.ScheduledFor.ToShortTimeString(), @videoconference.ScheduledFor.ToShortDateString()</strong></li>
                <li>Length: @videoconference.TimeSpan.ToString(@"hh\:mm")</li>
                <li>Description: @videoconference.Description</li>
            </ul>

            @*c3*@
            @if (videoconference.IsHost(currentUser))
            {
                //c4
                @if (videoconference.IsOngoing) JoinVideoconferenceAsHost();
                else
                {<button class="btn" @onclick="JoinVideoconferenceAsHostAsync">Start the videoconference</button>}
            }
            else
            {
                //c5
                @if (videoconference.IsCompleted)
                {<div class="alert alert-info"><p>This videoconference has <strong>finished</strong>.</p></div> }
                else if (videoconference.HasToOccurLater)
                { <div class="alert alert-info"><p>This videoconference has <strong>not begun yet</strong>.</p></div> }
                else if (videoconference.IsOngoing)
                {
                    //c6
                    if (videoconference.HasPassword && !videoconference.PasswordIsCorrect(inputVideoconferencePassword))
                    {
                        <div class="alert alert-info mb-3">
                            <p>A <strong>password</strong> is needed to access the videoconference.</p>
                        </div>

                        <div class="form-inline">
                            <input type="password" class="form-control text-center mb-3 mb-sm-0 mr-2" @bind="inputVideoconferencePassword" placeholder="Enter the password to join" autofocus />
                            <button class="btn">Submit</button>
                        </div>
                    }
                    else
                    {
                        //c7
                        //here it's just another user of the platform but not the one who created the videoconf so we don't ask for other name
                        @if (currentUser != null)
                        {
                            <button class="btn" @onclick="JoinVideoconferenceAsGuest">Join as @currentUser.Pseudo</button>
                        }
                        else
                        {
                            <div class="form-inline">
                                <input type="text" class="form-control text-center mb-3 mb-sm-0 mr-2" @oninput="InputPseudo" placeholder="Write your name" autofocus />
                                <a href="Identity/Account/LoginShort?pseudo=@inputPseudo&roomId=@RoomId&returnUrl=/@RoomId" class="mr-3">JoinTest</a>
                            </div>

                            @if (!String.IsNullOrEmpty(inputPseudo))
                            {
                                if (pseudoExistsInTheRoom)
                                {
                                    <p class="small">This user name is already taken for this videoconference.</p>
                                }
                            }
                        }
                    }
                }
            }
        }
    </div>
}

@code {
    [Parameter]
    public string RoomId { get; set; }

    ApplicationUser currentUser;
    Videoconference videoconference;
    string inputVideoconferencePassword;
    string inputGuestName;
    bool userExists;
    string inputPseudo;
    bool pseudoExistsInTheRoom;
    bool userHasJoinedRoom;

    // Once connected to the videoconference
    bool userHasJoinedVideoconference = false;
    ApplicationUser userJoiningTheVideoconference; //can be the host, a connected guest or an anonymous guest

    protected override async Task OnInitializedAsync()
    {
        currentUser = await ApplicationUserService.GetCurrentUser();

        if (!String.IsNullOrEmpty(RoomId))
            videoconference = await VideoconferenceService.GetByRoomAsync(RoomId);
    }

    private bool videoconferenceExists(string roomId)
        => videoconference != null;

    private void JoinVideoconferenceAsHost()
    {
        userHasJoinedRoom = true;
        StateHasChanged();
    }

    private async Task JoinVideoconferenceAsHostAsync()
    {
        userHasJoinedRoom = true;
        videoconference.IsOngoing = true;
        await VideoconferenceService.UpdateAsync(videoconference);
        StateHasChanged();
    }

    private void JoinVideoconferenceAsGuest()
    {
        userHasJoinedRoom = true;
        StateHasChanged();
    }

    private async Task InputPseudo(ChangeEventArgs args)
    {
        inputPseudo = args.Value.ToString();
        await PseudoExistsInTheRoomAsync(inputPseudo, RoomId);
    }

    private async Task PseudoExistsInTheRoomAsync(string pseudo, string roomId)
    {
        ApplicationUser userWithSamePseudoInTheSameRoom = await ApplicationUserService.GetByPseudoAndRoom(pseudo, roomId);
        pseudoExistsInTheRoom = userWithSamePseudoInTheSameRoom != null;
    }
}
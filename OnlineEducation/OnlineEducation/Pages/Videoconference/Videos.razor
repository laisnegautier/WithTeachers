@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject IModalService Modal
@inject NavigationManager NavigationManager
@inject VideoconferenceService VideoconferenceService
@inject ApplicationUserService ApplicationUserService

<div class="connected-users">
    <em>Offer: @receivedRTCOffer</em>
    <em class="small">Answer: @receivedRTCAnswer</em>
    <button @onclick="JSmakeCall">Make call</button>
    <strong>@RTCOffer</strong>
    <h3>Group state</h3>
    <ul class="little">
        <li><span>@nbUsers persons</span></li>
        <li><span>Password @(videoconference.HasPassword ? "needed" : "not needed")</span></li>
    </ul>
    <ul class="list-unstyled">
        @foreach (string message in groupMessages)
        {
            <li>@message</li>
        }
    </ul>
</div>

<div class="toolbar-connectivity">
    <ul>
        <li><button class="btn"><span class="oi oi-monitor" aria-hidden="true"></span> Share your screen</button></li>
        <li><button class="btn"><span class="oi oi-camera-slr" aria-hidden="true"></span> Disable camera</button></li>
        <li><button class="btn"><span class="oi oi-microphone" aria-hidden="true"></span> Disable microphone</button></li>
        <li><button class="btn" @onclick="Disconnect"><span class="oi oi-circle-x" aria-hidden="true"></span> Quit the videoconference</button></li>
    </ul>
</div>

<div class="videos">
    <div>
        <button @onclick="@(() => JSRuntime.InvokeVoidAsync("webRTC_playVideoFromCamera"))">Play video local</button>
        <video id="localVideoPlayback" autoplay />
        <video id="remoteVideo" autoplay />
    </div>

    @for (int i = 0; i < nbUsers; i++)
    {
        <div class="video-user">
        </div>
    }
    <nav class="navbar fixed-bottom navbar-dark bg-dark toolbarSignalR">
        <h3 class="navbar-brand">State</h3>
        <ul>
            <li>
                User:
                @if (videoconference.IsHost(currentUser))
                {
                    <span>Host</span>
                }
                else if (!videoconference.IsHost(currentUser) && currentUser.IsAnonymous)
                {
                    <span>@currentUser.Pseudo (anonymous guest)</span>
                }
                else if (!videoconference.IsHost(currentUser) && !currentUser.IsAnonymous)
                {
                    <span>@currentUser.Pseudo (registered guest)</span>
                }
            </li>
            <li>Connection State: <span>@HubConnection.State</span></li>
            <li>Connection ID: <span>@HubConnection.ConnectionId</span></li>
        </ul>
    </nav>
</div>

@code {
    ApplicationUser currentUser;

    [Parameter]
    public string RoomId { get; set; }

    Videoconference videoconference = new Videoconference();

    VideoconferenceUser vu;
    SignalRConnection signalRconnection;

    static HubConnection HubConnection;
    List<string> groupMessages = new List<string>();
    int nbUsers;

    //get the user
    //connect to the hub
    //get the videoconference and add connection in it
    protected override async Task OnInitializedAsync()
    {
        currentUser = await ApplicationUserService.GetCurrentUser();

        await InitializeHubAsync();

        videoconference = await VideoconferenceService.GetByRoomAsync(RoomId);
        vu = await VideoconferenceService.AddToRoom(videoconference, currentUser);
        string userAgent = await JSRuntime.InvokeAsync<string>("getUserAgent");
        signalRconnection = await VideoconferenceService.AddConnectionToJoinTable(vu, HubConnection.ConnectionId, userAgent);

        //VERY IMPORTANT TO PUT IT AT THE END
        await HubConnection.SendAsync("GetNumberOfUsers", RoomId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("initParameters", RoomId);
    }

    private string RTCOffer = "";
    async Task JSmakeCall()
    {
        RTCOffer = await JSRuntime.InvokeAsync<string>("makeCall");
        await HubConnection.SendAsync("ShareRTCOffer", RTCOffer, RoomId);
    }

    async Task InitializeHubAsync()
    {
        // Connection creation
        HubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/webRTCHub"))
        .WithAutomaticReconnect()
        .Build();

        HubConnection.On<string>("MessageToGroupClient", message => UpdateMessageGroup(message));
        HubConnection.On<int>("UpdateNumberOfConnectedUser", (nb) => UpdateNumberOfConnectedUser(nb));
        HubConnection.On<string>("ReceiveRTCOffer", (offer) => RTCOfferHandle(offer));
        HubConnection.On<string>("ReceiveRTCAnswer", (answer) => RTCAnswerHandle(answer));
        HubConnection.On<string>("ReceiveIceCandidate", (iceCandidate) => AddIceCandidate(iceCandidate));

        // Connection start
        await HubConnection.StartAsync();

        // Put into group
        await HubConnection.SendAsync("AddToGroup", currentUser.Pseudo, RoomId);
    }

    string receivedRTCOffer = "";
    async Task RTCOfferHandle(string offer)
    {
        receivedRTCOffer = offer;
        StateHasChanged();

        string answerToSend = await JSRuntime.InvokeAsync<string>("onReceivingOffer", receivedRTCOffer);
        await HubConnection.SendAsync("ShareRTCAnswer", answerToSend, RoomId);
    }

    string receivedRTCAnswer = "";
    async Task RTCAnswerHandle(string answer)
    {
        receivedRTCAnswer = answer;
        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("onReceivingAnswer", receivedRTCAnswer);
    }



    //LISTENING TO ICE CANDIDATES

    [JSInvokable]
    public static async Task ShareIceCandidate(string iceCandidate, string roomId)
    {
        await HubConnection.SendAsync("ShareIceCandidate", iceCandidate, roomId);
    }

    async Task AddIceCandidate(string iceCandidate)
    {
        await JSRuntime.InvokeVoidAsync("onReceivingIceCandidate", iceCandidate);
    }





    void UpdateNumberOfConnectedUser(int nb)
    {
        nbUsers = nb;
        StateHasChanged();
    }

    void UpdateMessageGroup(string message)
    {
        groupMessages.Add(message);
        StateHasChanged();
    }

    async Task Disconnect()
    {
        //remove from room in the database
        await VideoconferenceService.Disconnect(currentUser, videoconference);
        await HubConnection.SendAsync("GetNumberOfUsers", RoomId);

        //prevent the others and
        //disconnect from hub
        await HubConnection.SendAsync("DisconnectAsync", currentUser.Pseudo, RoomId);

        //disconnect and
        //delete anonymous account

        //redirect
        NavigationManager.NavigateTo("/");
    }
}
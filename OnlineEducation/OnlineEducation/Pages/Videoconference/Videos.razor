@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JSRuntime
@inject IModalService Modal
@inject NavigationManager NavigationManager
@inject VideoconferenceService VideoconferenceService
@inject ApplicationUserService ApplicationUserService

    <div class="connected-users">
        <h3>Group state</h3>
        <ul class="little">
            <li><span>@videoconference.CountConnectedMembers persons</span></li>
            <li><span>Password @(videoconference.HasPassword ? "needed" : "not needed")</span></li>
        </ul>
        <ul class="list-unstyled">
            @foreach (string message in groupMessages)
            {
                <li>@message</li>
            }
        </ul>
    </div>

<div class="toolbar-connectivity">
    <ul>
        <li><button class="btn"><span class="oi oi-monitor" aria-hidden="true"></span> Share your screen</button></li>
        <li><button class="btn"><span class="oi oi-camera-slr" aria-hidden="true"></span> Disable camera</button></li>
        <li><button class="btn"><span class="oi oi-microphone" aria-hidden="true"></span> Disable microphone</button></li>
        <li><button class="btn" @onclick="Disconnect"><span class="oi oi-phone" aria-hidden="true"></span> Quit the videoconference</button></li>
    </ul>
</div>

<div class="videos">

    <nav class="navbar fixed-bottom navbar-dark bg-dark toolbarSignalR">
        <h3 class="navbar-brand">State</h3>
        <ul>
            <li>User: 
                @if (videoconference.IsHost(currentUser))
                {
                    <span>Host</span>
                }
                else if (!videoconference.IsHost(currentUser) && currentUser.IsAnonymous)
                {
                    <span>@currentUser.Pseudo (anonymous guest)</span>
                }
                else if (!videoconference.IsHost(currentUser) && !currentUser.IsAnonymous)
                {
                    <span>@currentUser.Pseudo (registered guest)</span>
                }
            </li>
            <li>Connection State: <span>@HubConnection.State</span></li>
            <li>Connection ID: <span>@HubConnection.ConnectionId</span></li>
        </ul>
    </nav>
</div>

@code {
    ApplicationUser currentUser;

    [Parameter]
    public string RoomId { get; set; }

    Videoconference videoconference = new Videoconference();

    VideoconferenceUser vu;
    SignalRConnection signalRconnection;

    HubConnection HubConnection;
    List<string> groupMessages = new List<string>();


    //get the user
    //connect to the hub
    //get the videoconference and add connection in it
    protected override async Task OnInitializedAsync()
    {
        currentUser = await ApplicationUserService.GetCurrentUser();

        await InitializeHubAsync();

        videoconference = await VideoconferenceService.GetByRoomAsync(RoomId);
        vu = await VideoconferenceService.AddToRoom(videoconference, currentUser);

        string userAgent = await JSRuntime.InvokeAsync<string>("getUserAgent");
        signalRconnection = await VideoconferenceService.AddConnectionToJoinTable(vu, HubConnection.ConnectionId, userAgent);

        //await HubConnection.SendAsync("MessageToGroup", $"{currentUser.Pseudo} joined the room.", RoomId);
    }

    async Task InitializeHubAsync()
    {
        // Connection creation
        HubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/webRTCHub"))
        .WithAutomaticReconnect()
        .Build();

        HubConnection.On<string>("MessageToGroupClient", message => UpdateMessageGroup(message));
        HubConnection.On<string>("JoinTheRoom", userPseudoWhoJoined => JoinedTheRoomHandler(userPseudoWhoJoined));
        HubConnection.On<string>("DisconnectFromRoom", userPseudoWhoLeft => DisconnectFromRoomHandler(userPseudoWhoLeft));

        // Connection start
        await HubConnection.StartAsync();


        // Put into group
        await HubConnection.SendAsync("AddToGroup", currentUser.Pseudo, RoomId);
    }

    void UpdateMessageGroup(string message)
    {
        groupMessages.Add(message);
        StateHasChanged();
    }

    async Task Disconnect()
    {
        await HubConnection.SendAsync("MessageToGroup", $"{currentUser.Pseudo} left the room.", RoomId);
        //remove from room in the database
        await VideoconferenceService.Disconnect(currentUser, videoconference);

        //prevent the others and
        //disconnect from hub
        await HubConnection.SendAsync("DisconnectAsync", currentUser.Pseudo, RoomId);

        //disconnect and
        //delete anonymous account

        //redirect
        NavigationManager.NavigateTo("/");
    }

    void JoinedTheRoomHandler(string userPseudo)
    {
        //videoconference = await VideoconferenceService.GetByRoomAsync(RoomId);

        // Updating the UI
        //numberPeopleInGroup = videoconference.CountConnectedMembers;
        StateHasChanged();
    }

    void DisconnectFromRoomHandler(string userPseudo)
    {

        //videoconference = await VideoconferenceService.GetByRoomAsync(RoomId);

        // Updating the UI
        StateHasChanged();
    }
}
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime JSRuntime
@inject IModalService Modal
@inject NavigationManager NavigationManager
@inject VideoconferenceService VideoconferenceService
@inject ApplicationUserService ApplicationUserService

<div class="connected-users">
    <ul class="list-unstyled">
        @foreach (string message in groupMessages)
        {
            <li>@message</li>
        }
    </ul>
</div>

<div class="toolbar-connectivity">
    <ul>
        <li><button class="btn"><span class="oi oi-monitor" aria-hidden="true"></span> Share your screen</button></li>
        <li><button class="btn"><span class="oi oi-camera-slr" aria-hidden="true"></span> Disable camera</button></li>
        <li><button class="btn"><span class="oi oi-microphone" aria-hidden="true"></span> Disable microphone</button></li>
        <li><button class="btn"><span class="oi oi-phone" aria-hidden="true"></span> Quit the videoconference</button></li>
    </ul>
</div>

<div class="videos">
    @if (Videoconference.IsHost(currentUser))
    {
        <p><strong>YOU'RE THE HOST</strong></p>
    }
    else if (!Videoconference.IsHost(currentUser) && currentUser.IsAnonymous)
    {
        <p><strong>YOU'RE AN ANONYMOUS GUEST</strong></p>
    }
    else if (!Videoconference.IsHost(currentUser) && !currentUser.IsAnonymous)
    {
        <p><strong>YOU'RE CONNECTED BUT ONLY A GUEST</strong></p>
    }

    <nav class="navbar fixed-bottom navbar-dark bg-dark toolbarSignalR">
        <h3 class="navbar-brand">SignalR State</h3>
        <ul>
            <li>Connection State: <span>@HubConnection.State</span></li>
            <li>Connection ID: <span>@HubConnection.ConnectionId</span></li>
        </ul>
    </nav>
</div>

@code {
    ApplicationUser currentUser;

    [Parameter]
    public Videoconference Videoconference { get; set; }

    VideoconferenceUser vu;
    SignalRConnection signalRconnection;

    HubConnection HubConnection;
    List<string> groupMessages = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await ApplicationUserService.GetCurrentUser();
        await InitializeHubAsync();
        vu = await VideoconferenceService.AddToRoom(Videoconference, currentUser);

        string userAgent = await JSRuntime.InvokeAsync<string>("getUserAgent");
        signalRconnection = await VideoconferenceService.AddConnectionToJoinTable(vu, HubConnection.ConnectionId, userAgent);
    }

    async Task InitializeHubAsync()
    {
        // Connection creation
        HubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/webRTCHub"))
        .WithAutomaticReconnect()
        .Build();

        HubConnection.On<string>("UpdateGroupState", (message) => { groupMessages.Add(message); StateHasChanged(); });

        // Connection start
        await HubConnection.StartAsync();

        // Put into group
        await HubConnection.SendAsync("AddToGroup", currentUser.UserName, Videoconference.RoomId);
        await HubConnection.SendAsync("MessageToYou", currentUser.UserName, "laisne.gautier@gmail.com", Videoconference.RoomId, "salut putoi");
        await HubConnection.SendAsync("MessageTest", currentUser.UserName, Videoconference.RoomId, "hihihihi");
    }
}
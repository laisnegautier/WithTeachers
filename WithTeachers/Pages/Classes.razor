@page "/classes"
@using WithTeachers.Data
@inject ClassService ClassService
@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@* --- CHOIX ANNEE --- *@
<div>
    @if (years == null)
    {
        <p>Loading...</p>
    }
    else if (years.Count <= 0)
    {
        <p>Nothing in the year list</p>
    }
    else
    {
        foreach (int year in years)
        {
            <button class="btn btn-primary" @onclick="(() => selectYear(year))">@year</button>
        }
        @selectedYear
    }
</div>
<hr />

@* --- CHOIX CLASSE --- *@
<div>
    @if (classes == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (classes.Count <= 0)
    {
        <p><em>No class</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ClassId</th>
                    <th>Year</th>
                    <th>UserName</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Class cl in classes)
                {
                    <tr>
                        <td>@cl.ClassId</td>
                        <td>@cl.Year</td>
                        <td>@cl.User.UserName</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<hr />

@* --- AJOUT D'UN ETUDIANT DANS L'ANNE EN COURS *@

@code {
    private List<int> years = null;
    private int selectedYear;
    private List<Class> classes = null;

    private ApplicationUser CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        System.Security.Claims.ClaimsPrincipal User = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        CurrentUser = await UserManager.GetUserAsync(User);

        // RECUPERATION DES ANNEES
        years = await ClassService.ReadYearsAsync(CurrentUser);
    }

    private async void selectYear(int year)
    {
        selectedYear = year;
        classes = await ClassService.ReadAllAsync(CurrentUser, year);
    }
}

@*<h1>Classes</h1>

    <button class="btn btn-primary">2020</button>
    <button class="btn btn-primary">2019</button>
    <button class="btn btn-primary">2018</button>

    <section>
        <h3>Groups</h3>
    </section>

    <h2>TEST : @CurrentUser.Email @CurrentUser.Id</h2>
    @if (classes == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ClassId</th>
                    <th>Year</th>
                    <th>UserId</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var cl in classes)
                {
                    <tr>
                        <td>@cl.ClassId</td>
                        <td>@cl.Year</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <EditForm Model="@classToAdd" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
*@
@*<ValidationSummary />*@
@*<p>
        <label>
            Class year*:
            <InputNumber id="year" @bind-Value="classToAdd.Year" />
            <ValidationMessage For="@(() => classToAdd.Year)" />
        </label>
    </p>

    <button type="submit">Submit</button>
    </EditForm>

    @code {
        private ApplicationUser CurrentUser;
        private List<Class> classes;
        private Class classToAdd = new Class();

        protected override async Task OnInitializedAsync()
        {
            System.Security.Claims.ClaimsPrincipal User = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
            CurrentUser = await UserManager.GetUserAsync(User);

            classes = await ClassService.ReadAllAsync();
        }

        private async Task RefreshClasses()
        {
            classes = await ClassService.ReadAllAsync();
        }

        private async void HandleValidSubmit()
        {
            classToAdd.User = CurrentUser;
            await ClassService.CreateAsync(classToAdd);
            classToAdd = new Class();

            await RefreshClasses();
        }
    }*@
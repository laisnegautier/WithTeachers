@page "/classes"

@using WithTeachers.Data
@inject ApplicationUserService ApplicationUserService
@inject ClassService ClassService
@inject StudentService StudentService
@attribute [Authorize]
@* --- AJOUTER UNE CLASSE --- *@
<section class="bg-light py-3 px-4 mb-3 rounded">
    <h3 class="font-weight-light">Add a class</h3>
    <EditForm class="form-row" Model="@classToAdd" OnValidSubmit="HandleValidSubmitAddClass">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="nameClass">Class name*</label>
            <InputText id="nameClass" class="form-control" @bind-Value="classToAdd.Name" />
            <ValidationMessage For="@(() => classToAdd.Name)" />
        </div>

        <div class="form-group">
            <label for="yearClass">Class year*</label>
            <InputNumber id="yearClass" class="form-control" @bind-Value="classToAdd.Year" />
            <ValidationMessage For="@(() => classToAdd.Year)" />
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</section>

@* --- AJOUTER UN ELEVE --- *@
@*<section class="bg-light py-3 px-4 mb-3 rounded">
        <h3 class="font-weight-light">Add a student</h3>
        <EditForm class="form-row" Model="@studentToAdd" OnValidSubmit="HandleValidSubmitAddStudent">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="lastnameStudent">Last name*</label>
                <InputText id="lastnameStudent" class="form-control" @bind-Value="studentToAdd.Lastname" />
                <ValidationMessage For="@(() => studentToAdd.Lastname)" />
            </div>

            <div class="form-group">
                <label for="firstnameStudent">First name*</label>
                <InputText id="firstnameStudent" class="form-control" @bind-Value="studentToAdd.Firstname" />
                <ValidationMessage For="@(() => studentToAdd.Firstname)" />
            </div>

            <div class="form-group">
                <label for="commentsStudent">Comments</label>
                <InputTextArea id="commentsStudent" class="form-control" @bind-Value="studentToAdd.Comments" />
                <ValidationMessage For="@(() => studentToAdd.Comments)" />
            </div>

            <div class="form-group">
                <label for="classStudent">Class associated*</label>
                <select id="classStudent" class="form-control selectpicker" @bind="studentToAdd.ClassId">
                    @foreach (Class cl in allClasses)
                    {
                        <option value="@(cl.ClassId.ToString())">@cl.Name - @cl.Year</option>
                    }
                </select>
                <ValidationMessage For="@(() => studentToAdd.Class)" />
            </div>

            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </section>*@

@* --- CHOIX ANNEE --- *@
<div class="btn-group">
    @if (years == null)
    {
        <p>Loading...</p>
    }
    else if (years.Count <= 0)
    {
        <p>Nothing in the year list</p>
    }
    else
    {
        foreach (int year in years)
        {
            <button type="button" class="btn btn-primary" @onclick="(() => selectYear(year))" disabled=@tabSelected(year)>@year</button>
        }
    }
</div>

@* --- CHOIX CLASSE --- *@
<div>
    @if (classes == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (classes.Count <= 0)
    {
        <p><em>No class</em></p>
    }
    else
    {
        <div class="btn-group">
            @foreach (Class cl in classes)
            {
                <button type="button" class="btn btn-primary" @onclick="(() => selectClass(cl))" disabled=@classSelected(cl)>@cl.Name</button>
            }
        </div>
    }
</div>

@if (students == null)
{
    <p><em>Choose a class</em></p>
}
else
{
    if (students.Count <= 0)
    {
        <p><em>Nothing yet</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Last name</th>
                    <th>Firstname</th>
                    <th>Comments</th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Student student in students)
                {
                    <tr>
                        <td>@student.Lastname</td>
                        <td>@student.Firstname</td>
                        <td>@student.Comments</td>
                        <td><button type="button" class="btn btn-primary">Edit</button></td>
                        <td><button type="button" class="btn btn-danger" @onclick="(() => DeleteStudent(student))">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
    <EditForm class="form-row" Model="@studentToAdd" OnValidSubmit="HandleValidSubmitAddStudent">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="lastnameStudent">Last name*</label>
            <InputText id="lastnameStudent" class="form-control" @bind-Value="studentToAdd.Lastname" />
            <ValidationMessage For="@(() => studentToAdd.Lastname)" />
        </div>

        <div class="form-group">
            <label for="firstnameStudent">First name*</label>
            <InputText id="firstnameStudent" class="form-control" @bind-Value="studentToAdd.Firstname" />
            <ValidationMessage For="@(() => studentToAdd.Firstname)" />
        </div>

        <div class="form-group">
            <label for="commentsStudent">Comments</label>
            <InputTextArea id="commentsStudent" class="form-control" @bind-Value="studentToAdd.Comments" />
            <ValidationMessage For="@(() => studentToAdd.Comments)" />
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

    @* --- AJOUT D'UN ETUDIANT DANS L'ANNE EN COURS *@

    @code {
        private ApplicationUser currentUser;
        private List<int> years = null;
        private int selectedYear;
        private Class selectedClass;
        private List<Class> classes = null;
        private List<Class> allClasses = null;
        private List<Student> students = null;
        private Class classToAdd = new Class();
        private Student studentToAdd = new Student();

        protected override async Task OnInitializedAsync()
        {
            currentUser = await ApplicationUserService.GetCurrentUser();
            years = await GetYears();
            allClasses = await GetAllClasses();
            classToAdd.Year = DateTime.Now.Year;
        }

        private async void selectYear(int year)
        {
            selectedYear = year;
            classes = await GetClasses();

            if (classes.Count > 0)
            {
                selectedClass = classes.First();
                if (selectedClass.Students.Count > 0)
                {
                    students = await GetStudents();
                }
            }
        }

        private async void selectClass(Class cl)
        {
            selectedClass = cl;
            students = await GetStudents();
        }

        private bool tabSelected(int year) => selectedYear == year;
        private bool classSelected(Class cl) => selectedClass == cl;

        // FORMS
        private async void HandleValidSubmitAddClass()
        {
            // Adding data
            classToAdd.User = currentUser;
            await ClassService.CreateAsync(classToAdd);

            // Refreshing components
            years = await GetYears();
            selectedYear = classToAdd.Year;
            classes = await GetClasses();
            allClasses = await GetAllClasses();

            // Formatting form
            classToAdd = new Class();
        }

        private async void HandleValidSubmitAddStudent()
        {
            // Adding data
            studentToAdd.ClassId = selectedClass.ClassId;
            await StudentService.CreateAsync(studentToAdd);

            // Refreshing components
            students = await GetStudents();

            // Formatting form
            studentToAdd = new Student();
        }

        private async void DeleteStudent(Student student)
        {
            await StudentService.Delete(student);

            // Refreshing components
            students = await GetStudents();
        }

        // PROPERTY UPDATES
        private async Task<List<int>> GetYears() => await ClassService.ReadYearsAsync(currentUser);
        private async Task<List<Class>> GetClasses() => await ClassService.ReadAllAsync(currentUser, selectedYear);
        private async Task<List<Class>> GetAllClasses() => await ClassService.ReadAllAsync(currentUser);
        private async Task<List<Student>> GetStudents() => await StudentService.ReadAllAsync(selectedClass);
    }
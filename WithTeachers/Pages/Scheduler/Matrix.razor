@namespace WithTeachers.Pages.Scheduler
@using WithTeachers.Data

@{ int x; }
@for (int y = 0; y < SizeY; y++)
{
    <tr>
        <HourCell Hour="@HandleDateTime(y)" />

        @{ x = 1; int spanY = 1; }
        @foreach (DateTime day in Week)
        {
            spanY = HandleSpanY(x, y);

            <Cell SpanY="@spanY" IsDisplayable="@HandleDisplay(x, y)" IsResizable="true" Day="@HandleDateTime(y, day)" />
            x++;
        }
    </tr>
}

@code {
    [Parameter]
    public Week Week { get; set; }

    [Parameter]
    public int SizeX { get; set; }

    [Parameter]
    public int SizeY { get; set; }

    private bool HandleDisplay(int x, int y)
    {
        // First column
        if (x == 0)
            // We don't want :30 minutes on the first column
            return y % 2 == 0;
        // This else has to be completed when sizable cell will be implemented
        else
            return true;
    }

    private int HandleSpanY(int x, int y)
    {
        return x == 0 ? (y % 2 == 0 ? 2 : 1) : 1;
    }

    internal struct HourMinute
    {
        public int Hour { get; set; }
        public int Minute { get; set; }

        public HourMinute(int y)
        {
            if (y % 2 == 0)
            {
                Hour = y / 2;
                Minute = 0;
            }
            else
            {
                Hour = (y - 1) / 2;
                Minute = 30;
            }
        }
    }

    private DateTime HandleDateTime(int y, DateTime day)
    {
        HourMinute hourMinute = new HourMinute(y);

        return new DateTime(day.Year, day.Month, day.Day, hourMinute.Hour, hourMinute.Minute, 0);
    }

    private DateTime HandleDateTime(int y)
    {
        HourMinute hourMinute = new HourMinute(y);

        return new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, hourMinute.Hour, hourMinute.Minute, 0);
    }
}
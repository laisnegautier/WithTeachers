@namespace WithTeachers.Pages.Scheduler
@using WithTeachers.Data

@while (y < sizeY)
{
    <tr>
        <HourCell Hour="@HandleDateTime(y)" />
        
        @foreach (DateTime day in Week)
        {
            spanY = HandleSpanY(x, y);

            <Cell SpanY="@spanY" IsDisplayable="@HandleDisplay(x, y)" IsResizable="@(x != 0)" Day="@HandleDateTime(y, day)" />
        }
    </tr>

    y++;
}

@code {
    [Parameter]
    public Week Week { get; set; }

    private int sizeX = 8;
    private int sizeY = 48;

    private int x = 0;
    private int y = 0;
    private int spanY;

    private int hour = -1;

    private bool HandleDisplay(int x, int y)
    {
        // First column
        if (x == 0)
            // We don't want :30 minutes on the first column
            return y % 2 == 0;
        // This else has to be completed when sizable cell will be implemented
        else
            return true;
    }

    private int HandleSpanY(int x, int y)
    {
        return x == 0 ? (y % 2 == 0 ? 2 : 1) : 1;
    }

    internal struct HourMinute
    {
        public int Hour { get; set; }
        public int Minute { get; set; }

        public HourMinute(int y)
        {
            if (y % 2 == 0)
            {
                Hour = y / 2;
                Minute = 0;
            }
            else
            {
                Hour = (y - 1) / 2;
                Minute = 30;
            }
        }
    }

    private DateTime HandleDateTime(int y, DateTime day)
    {
        HourMinute hourMinute = new HourMinute(y);

        return new DateTime(day.Year, day.Month, day.Day, hourMinute.Hour, hourMinute.Minute, 0);
    }

    private DateTime HandleDateTime(int y)
    {
        HourMinute hourMinute = new HourMinute(y);

        return new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, hourMinute.Hour, hourMinute.Minute, 0);
    }
}
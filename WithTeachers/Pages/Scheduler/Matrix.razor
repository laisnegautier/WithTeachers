@namespace WithTeachers.Pages.Scheduler
@using WithTeachers.Data
@inject ActivityService ActivityService

@{ int x; }
@for (int y = 0; y < SpanMatrix.GetLength(1); y++)
{
    x = 1;
    <tr>
        <HourCell Hour="@HandleDateTime(y)" />

        @foreach (DateTime day in Week)
        {
            if (!IsCellHidden(x, y))
            {
                Activity activity;
                cellClass = HandleCellClass(x, y, out activity);
                <Cell OnDragActivity="@HandleOnDragActivity" OnDropCoordinates="@HandleOnDropCoordinates" SpanMatrix="@SpanMatrix" Activity="@activity" X="@x" Y="@y" IsResizable="true" Day="@HandleDateTime(y, day)" CellClass="@cellClass" />
            }
            x++;
        }
    </tr>
}

@code {
    [Parameter]
    public Week Week { get; set; }

    [Parameter]
    public List<Activity> Activities { get; set; }

    [Parameter]
    public int[,] SpanMatrix { get; set; }




    private Activity ActivityToUpdate { get; set; }
    [Parameter]
    public EventCallback<Tuple<int, int, Activity>> ModifySpanMatrix { get; set; }

    protected async Task HandleOnDropCoordinates(int[] coordinates)
    {
        Tuple<int, int, Activity> monTuple = new Tuple<int, int, Activity>(coordinates[0], coordinates[1], ActivityToUpdate);
        await ModifySpanMatrix.InvokeAsync(monTuple);
    }
    protected void HandleOnDragActivity(Activity act)
    {
        ActivityToUpdate = act;
    }




    private string cellClass;

    private string HandleCellClass(int x, int y, out Activity activity)
    {
        int hourStart;
        int minStart;
        activity = null;

        foreach (Activity act in Activities)
        {
            if ((int)act.ScheduledFor.DayOfWeek == x)
            {
                hourStart = act.ScheduledFor.Hour;
                minStart = act.ScheduledFor.Minute;

                if (minStart >= 30) hourStart = 2 * hourStart + 1;
                else hourStart = 2 * hourStart;

                if (hourStart == y)
                {
                    cellClass = "filled-cell";
                    activity = act;
                    break;
                }
                else
                {
                    cellClass = "empty-cell";
                }
            }
            else
            {
                cellClass = "empty-cell";
            }
        }

        return cellClass;
    }

    private bool HandleDisplay(int x, int y)
    {
        // First column
        if (x == 0)
            // We don't want :30 minutes on the first column
            return y % 2 == 0;
        // This else has to be completed when sizable cell will be implemented
        else
            return true;
    }

    internal struct HourMinute
    {
        public int Hour { get; set; }
        public int Minute { get; set; }

        public HourMinute(int y)
        {
            if (y % 2 == 0)
            {
                Hour = y / 2;
                Minute = 0;
            }
            else
            {
                Hour = (y - 1) / 2;
                Minute = 30;
            }
        }
    }

    // Hiding cell if it is under a spanned cell above
    private bool IsCellHidden(int x, int y)
    {
        for (int j = 0; j < y; j++)
            if (SpanMatrix[x, j] > 1)
                if (y - j < SpanMatrix[x, j])
                    return true;
        return false;
    }

    private DateTime HandleDateTime(int y, DateTime day)
    {
        HourMinute hourMinute = new HourMinute(y);

        return new DateTime(day.Year, day.Month, day.Day, hourMinute.Hour, hourMinute.Minute, 0);
    }

    private DateTime HandleDateTime(int y)
    {
        HourMinute hourMinute = new HourMinute(y);

        return new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, hourMinute.Hour, hourMinute.Minute, 0);
    }
}
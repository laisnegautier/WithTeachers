<td rowspan="@SpanMatrix[X, Y]"
    draggable="true"
    @ondrag="HandleDrag"
    @ondragstart="@(() => HandleDragStart(Activity, X, Y))"
    @ondragenter="HandleDragEnter"
    @ondrop="@(() => HandleDrop(X, Y))"
    class="small @CellClass @(Day.DayOfYear == DateTime.Now.DayOfYear ? "currentDay" : "") @(Day.Minute != 30 ? "dash" : "nolineTop")"
    style="@dragClass"
    ondragover="event.preventDefault();">
    @if (Activity != null)
    {
        <strong>@Activity.Title</strong>
    }
    @Day.ToString("dd MMMM hh:mm tt")
</td>

@*ondragstart="event.dataTransfer.setData('', event.target.id);"*@

@code {
    [Parameter]
    public int[,] SpanMatrix { get; set; }

    [Parameter]
    public int X { get; set; }

    [Parameter]
    public int Y { get; set; }

    [Parameter]
    public bool IsResizable { get; set; }

    [Parameter]
    public DateTime Day { get; set; }

    [Parameter]
    public string CellClass { get; set; }

    [Parameter]
    public Activity Activity { get; set; }

    [Parameter]
    public EventCallback<Tuple<Activity, int, int>> OnDragActivity { get; set; }
    [Parameter]
    public EventCallback<int[]> OnDropCoordinates { get; set; }

    private string dragClass = "";

    private async Task HandleDragStart(Activity selectedActivity, int startX, int startY)
    {
        dragClass = "border: 2px dashed blue !important;";
        await OnDragActivity.InvokeAsync(new Tuple<Activity, int, int>(selectedActivity, startX, startY));
    }

    private async Task HandleDrop(int x, int y)
    {
        await OnDropCoordinates.InvokeAsync(new int[] { x, y });
        dragClass = "border: 2px dashed cyan !important;";
    }

    private void HandleDrag(DragEventArgs e)
    {
        dragClass = "border: 2px dashed green !important;";
    }

    private void HandleDragEnter(DragEventArgs e)
    {
        dragClass = "border: 2px dashed pink !important;";
    }
}
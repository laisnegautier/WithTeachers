@page "/scheduler"

@namespace WithTeachers.Pages.Scheduler
@using WithTeachers.Data
@using System.Globalization
@using System.Collections.Generic
@inject ApplicationUserService ApplicationUserService
@inject ActivityService ActivityService
@attribute [Authorize]

<h3>Scheduler</h3>

<AddActivityForm />

<strong>@XX - @YY - @((ActivityToUpdate != null) ? ActivityToUpdate.Title : "lol")</strong>

<section class="scheduler">
    <div class="form-group col-4">
        <input type="date" class="form-control datePicker" value="@SelectedDate.ToString("yyy-MM-dd")" @onchange="@ChangeSelectedDateAsync">
    </div>
    <div class="form-group col-4">
        <button class="button-week" @onclick="PreviousWeek">&#8249; Previous week</button>
        <button class="button-week" @onclick="NextWeek">Next week &#8250;</button>
    </div>

    <table class="table table-bordered">
        <thead class="thead-dark">
            <tr>
                <DaysHeading Week="@Week" />
            </tr>
        </thead>
        <tbody>
            <Matrix ModifySpanMatrix="HandleModifySpanMatrix" Week="@Week" Activities="@Activities" SpanMatrix="@SpanMatrix" />
        </tbody>
    </table>
</section>

@code {
    int XX = 0;
    int YY = 0;
    Activity ActivityToUpdate;
    protected void HandleModifySpanMatrix(Tuple<int, int, Activity> bag)
    {
        SpanMatrix[bag.Item1, bag.Item2]++;
        XX = bag.Item1;
        YY = bag.Item2;
        ActivityToUpdate = bag.Item3;
    }

    public DateTime SelectedDate { get; set; } = DateTime.Now;

    public static Week Week { get; set; }

    private List<Activity> Activities;

    private int[,] SpanMatrix = new int[8, 48];

    protected override async Task OnInitializedAsync()
    {
        Week = new Week(SelectedDate);
        Activities = await ActivityService.ReadAllAsync(Week);
        CreateSpanMatrix(Activities);
    }

    private async Task NextWeek() {
        SelectedDate = SelectedDate.AddDays(7).StartOfWeek(DayOfWeek.Monday);
        Week = new Week(SelectedDate);
        Activities = await ActivityService.ReadAllAsync(Week);
        CreateSpanMatrix(Activities);
    }

    private async Task PreviousWeek() {
        SelectedDate = SelectedDate.AddDays(-7).StartOfWeek(DayOfWeek.Monday);
        Week = new Week(SelectedDate);
        Activities = await ActivityService.ReadAllAsync(Week);
        CreateSpanMatrix(Activities);
    }

    private async Task ChangeSelectedDateAsync(ChangeEventArgs e)
    {
        SelectedDate = DateTime.Parse(e.Value.ToString());
        Week = new Week(SelectedDate);
        Activities = await ActivityService.ReadAllAsync(Week);
        CreateSpanMatrix(Activities);
    }

    // Computing the span matrix for UI purpose
    private void CreateSpanMatrix(List<Activity> activities)
    {
        // HERE WE SHOULD GET ALL ACTIVITIES OF THE WEEK TO PUT THEM IN THE SPAN MATRIX

        for (int i = 0; i < SpanMatrix.GetLength(0); i++)
            for (int j = 0; j < SpanMatrix.GetLength(1); j++)
                SpanMatrix[i, j] = 1;

        int hourStart;
        int minStart;
        foreach (Activity activity in activities)
        {
            hourStart = activity.ScheduledFor.Hour;
            minStart = activity.ScheduledFor.Minute;

            if (minStart >= 30) hourStart = 2 * hourStart + 1;
            else hourStart = 2 * hourStart;

            SpanMatrix[(int)activity.ScheduledFor.DayOfWeek, hourStart] = (int)(activity.TimeSpan.TotalMinutes) / 30;
        }
    }
}
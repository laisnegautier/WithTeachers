@inject ApplicationUserService ApplicationUserService
@inject CourseService CourseService
@inject IFileUpload FileUploadService

<h3>Your courses</h3>

@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else if (courses.Count == 0)
{
}
else
{
    <div class="btn-toolbar mb-3" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group btn-group-sm mr-2" role="group" aria-label="First group">CREATION DATE
            <button type="button" class="btn btn-secondary" @onclick="SortByCreationDateAscending">Ascending</button>
            <button type="button" class="btn btn-secondary" @onclick="SortByCreationDateDescending">Descending</button>
        </div>
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by name" aria-label="Input group example" aria-describedby="btnGroupAddon">
        </div>
    </div>

    <CoursesList Courses="courses" />
}

@code {
    [Parameter]
    public EventCallback<bool> CoursesExist { get; set; }

    [Parameter]
    public bool Refresh { get; set; }

    ApplicationUser currentUser;
    private List<Course> courses = null;

    protected override async Task OnParametersSetAsync()
    {
        currentUser = await ApplicationUserService.GetCurrentUser();
        courses = await CourseService.ReadAllAsync(currentUser);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (courses != null && courses.Count > 0)
            await CoursesExist.InvokeAsync(true);
        else
            await CoursesExist.InvokeAsync(false);
    }

    private async Task DeleteCourse(Course course)
    {
        foreach (CourseDocument document in course.Documents)
            FileUploadService.Delete(document.FileUrl);

        await CourseService.DeleteAsync(course);
    }

    private async Task SortByCreationDateAscending()
    { courses = await CourseService.ReadAllOrderByCreationDateAscendingAsync(currentUser); }

    private async Task SortByCreationDateDescending()
    { courses = await CourseService.ReadAllOrderByCreationDateDescendingAsync(currentUser); }
}

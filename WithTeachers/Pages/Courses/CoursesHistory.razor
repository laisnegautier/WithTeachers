@inject ApplicationUserService ApplicationUserService
@inject CourseService CourseService
@inject IFileUpload FileUploadService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IModalService Modal

@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else if (courses.Count == 0)
{
}
else
{
    <div class="btn-toolbar mb-3" role="toolbar" aria-label="Toolbar with button groups">
        <div class="btn-group btn-group-sm mr-2" role="group" aria-label="Sorting group">
            <div class="input-group-prepend">
                <div class="input-group-text" id="btnGroupAddon">Sort by</div>
            </div>
            <button type="button" class="btn btn-secondary" @onclick="() => ChooseSortingFilter(SortingFilter.Title)" disabled=@SelectedSortingFilter(SortingFilter.Title)>Course title</button>
            <button type="button" class="btn btn-secondary" @onclick="() => ChooseSortingFilter(SortingFilter.UpdateDate)" disabled=@SelectedSortingFilter(SortingFilter.UpdateDate)>Update date</button>
            <button type="button" class="btn btn-secondary" @onclick="() => ChooseSortingFilter(SortingFilter.CreationDate)" disabled=@SelectedSortingFilter(SortingFilter.CreationDate)>Creation date</button>
        </div>
        <div class="btn-group btn-group-sm mr-2" role="group" aria-label="Order group">
            <div class="input-group-prepend">
                <div class="input-group-text" id="btnGroupAddon">Order</div>
            </div>
            <button type="button" class="btn btn-secondary" @onclick="() => ChooseOrderFilter(OrderFilter.Descending)" disabled=@SelectedOrderFilter(OrderFilter.Descending)><span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span></button>
            <button type="button" class="btn btn-secondary" @onclick="() => ChooseOrderFilter(OrderFilter.Ascending)" disabled=@SelectedOrderFilter(OrderFilter.Ascending)><span class="oi oi-arrow-thick-top" aria-hidden="true"></span></button>
        </div>
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by name" aria-label="Input group example" aria-describedby="btnGroupAddon" @oninput="SearchCourseByTitle">
        </div>
    </div>

    <div class="card-columns">
        @foreach (Course course in coursesToDisplay)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@course.Title</h5>
                    @if (!String.IsNullOrEmpty(course.Password))
                    {
                        <span>Password required.</span>
                    }
                    <p class="small text-muted">Created on @course.CreationDate @(course.UpdateDate.ToShortDateString() != course.CreationDate.ToShortDateString() ? "(updated " + @course.UpdateDate + ")" : "")</p>
                    <p class="card-text">@course.Description</p>
                </div>
                @if (course.Documents != null && course.Documents.Count > 0)
                {
                    <ul class="list-group list-group-flush">
                        @foreach (CourseDocument document in course.Documents)
                        {
                            string link = "uploads/" + document.FileUrl;
                            <li class="list-group-item"><NavLink href="@link" target="_blank" title="Open this document" alt="Open this document"><span class="oi oi-document" aria-hidden="true"></span> @document.Title</NavLink></li>
                        }
                    </ul>
                }
                <div class="card-body d-flex justify-content-between">
                    @if (copiedLink == NavigationManager.Uri + "/" + course.Slug)
                    {
                        <button class="btn btn-sm"><span class="oi oi-check" aria-hidden="true"></span> Link copied</button>
                    }
                    else
                    {
                        <button class="btn btn-sm" @onclick="@(() => CopyTextToClipboard(NavigationManager.Uri + "/" + course.Slug))">Share link</button>
                    }

                    <div>
                        <button class="btn btn-sm" @onclick="() => EditCourse(course)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteCourse(course)">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public EventCallback<bool> CoursesExist { get; set; }

    [Parameter]
    public bool Refresh { get; set; }

    ApplicationUser currentUser;
    List<Course> courses = null;
    List<Course> coursesToDisplay = null;
    string copiedLink = null;

    protected override async Task OnParametersSetAsync()
    {
        currentUser = await ApplicationUserService.GetCurrentUser();
        courses = await CourseService.ReadAllAsync(currentUser);

        // To keep track of the full first query
        coursesToDisplay = SortList(courses);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (courses != null && courses.Count > 0)
                await CoursesExist.InvokeAsync(true);
            else
                await CoursesExist.InvokeAsync(false);
        }
    }

    private async Task CopyTextToClipboard(string link)
    {
        copiedLink = link;
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", link);
    }

    private async Task EditCourse(Course course)
    {
        var parameters = new ModalParameters();
        parameters.Add("Course", course);
        //NEED TO ADD THE COURSECOURSEDOCUMENT NOT COURSE

        var modalOpened = Modal.Show<ModalEditCourse>("Edit course", parameters);
        var result = await modalOpened.Result;

        if (!result.Cancelled)
        {
            //var r = result.Data;

            foreach (CourseDocument document in course.Documents)
                FileUploadService.Delete(document.FileUrl);

            await CourseService.DeleteAsync(course);

            courses.Remove(course);
            coursesToDisplay.Remove(course);

            if (courses == null || courses.Count == 0) await CoursesExist.InvokeAsync(false);
        }
    }

    private async Task DeleteCourse(Course course)
    {
        var parameters = new ModalParameters();
        parameters.Add("CourseTitle", course.Title);

        var modalOpened = Modal.Show<ModalDeleteCourse>("Delete course", parameters);
        var result = await modalOpened.Result;

        if (!result.Cancelled)
        {
            //var r = result.Data;

            foreach (CourseDocument document in course.Documents)
                FileUploadService.Delete(document.FileUrl);

            await CourseService.DeleteAsync(course);

            courses.Remove(course);
            coursesToDisplay.Remove(course);

            if (courses == null || courses.Count == 0) await CoursesExist.InvokeAsync(false);
        }
    }

    // SORTING RESULTS
    enum SortingFilter { Title, CreationDate, UpdateDate };
    enum OrderFilter { Ascending, Descending };
    SortingFilter chosenSortingFilter = SortingFilter.UpdateDate;
    OrderFilter chosenOrderFilter = OrderFilter.Descending;

    private void ChooseSortingFilter(SortingFilter sortingFilter)
    {
        chosenSortingFilter = sortingFilter;
        coursesToDisplay = SortList(courses);
    }

    private void ChooseOrderFilter(OrderFilter orderFilter)
    {
        chosenOrderFilter = orderFilter;
        coursesToDisplay = SortList(courses);
    }

    private List<Course> SortList(List<Course> _courses)
    {
        if (chosenSortingFilter == SortingFilter.Title)
            return (chosenOrderFilter == OrderFilter.Ascending ? _courses.OrderBy(x => x.Title) : _courses.OrderByDescending(x => x.Title)).ToList();
        else if (chosenSortingFilter == SortingFilter.UpdateDate)
            return (chosenOrderFilter == OrderFilter.Ascending ? _courses.OrderBy(x => x.UpdateDate) : _courses.OrderByDescending(x => x.UpdateDate)).ToList();
        else if (chosenSortingFilter == SortingFilter.CreationDate)
            return (chosenOrderFilter == OrderFilter.Ascending ? _courses.OrderBy(x => x.CreationDate) : _courses.OrderByDescending(x => x.CreationDate)).ToList();
        else return null;
    }

    private void SearchCourseByTitle(ChangeEventArgs inputText)
    {
        coursesToDisplay = courses.Where(x => x.Title.ToLower().Contains(inputText.Value.ToString().ToLower())).ToList();
        coursesToDisplay = SortList(coursesToDisplay);
    }

    private bool SelectedSortingFilter(SortingFilter sortingFilter)
        => sortingFilter == chosenSortingFilter;

    private bool SelectedOrderFilter(OrderFilter orderFilter)
        => orderFilter == chosenOrderFilter;
}
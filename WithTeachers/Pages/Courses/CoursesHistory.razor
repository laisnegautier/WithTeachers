@inject ApplicationUserService ApplicationUserService
@inject CourseService CourseService
@inject IFileUpload FileUploadService

<h3>Your courses</h3>

@if (courses == null)
{
    <p><em>Loading...</em></p>
}
else if (courses.Count == 0)
{
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Title</th>
                <th scope="col">Description</th>
                <th scope="col">Password</th>
                <th scope="col">Link</th>
                <th scope="col">Creation date</th>
                <th scope="col">Last update</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in courses)
            {
                <tr>
                    <th scope="row">@(courses.IndexOf(course) + 1)</th>
                    <td>@course.Title</td>
                    <td>@course.Description</td>
                    <td>@((MarkupString)(String.IsNullOrEmpty(course.Password) ? "Not required" : "<strong>"+course.Password+"</strong>"))</td>
                    <td><a href="link.html" title="See this course in details" alt="See this course in details">withteachers.com/courses/@course.Slug</a></td>
                    <td>@course.CreationDate.ToShortDateString()</td>
                    <td>@(course.CreationDate.ToShortDateString() == course.UpdateDate.ToShortDateString() ? "Never updated" : course.CreationDate.ToShortDateString())</td>
                    <td class="delete" @onclick="@(() => DeleteCourse(course))">
                        <span class="oi oi-x" aria-hidden="true"></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="card-columns">
        @foreach (Course course in courses)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@course.Title</h5>
                    @if (!String.IsNullOrEmpty(course.Password))
                    {
                    <span>Password required.</span>
                    }
                    <p class="small text-muted">Created on @course.CreationDate @(course.UpdateDate.ToShortDateString() != course.CreationDate.ToShortDateString() ? "(updated " + @course.UpdateDate + ")": "")</p>
                    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
                </div>
                @if (course.Documents != null && course.Documents.Count > 0)
                {
                    <ul class="list-group list-group-flush">
                        @foreach (CourseDocument document in course.Documents)
                        {
                            <li class="list-group-item">@document.Title</li>
                        }
                    </ul>
                }
                <div class="card-body">
                    <button class="btn">Edit</button>
                    <button class="btn btn-danger">Delete</button>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public EventCallback<bool> CoursesExist { get; set; }

    [Parameter]
    public bool Refresh { get; set; }

    ApplicationUser currentUser;
    private List<Course> courses = null;

    protected override async Task OnParametersSetAsync()
    {
        currentUser = await ApplicationUserService.GetCurrentUser();
        courses = await CourseService.ReadAllAsync(currentUser);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (courses != null && courses.Count > 0)
            await CoursesExist.InvokeAsync(true);
        else
            await CoursesExist.InvokeAsync(false);
    }

    private async Task DeleteCourse(Course course)
    {
        foreach (CourseDocument document in course.Documents)
            FileUploadService.Delete(document.FileUrl);

        await CourseService.DeleteAsync(course);
    }
}
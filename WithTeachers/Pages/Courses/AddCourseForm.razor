@using Slugify;
@inject ApplicationUserService ApplicationUserService
@inject CourseService CourseService
@inject CourseDocumentService CourseDocumentService
@inject IFileUpload FileUploadService

<h4 class="form-title small"><span class="oi oi-plus" aria-hidden="true"></span> Add a course with documents</h4>
<EditForm class="form-section" Model="@model" OnValidSubmit="HandleValidSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <div class="row add-class">
        <div class="col-12 col-md-5">
            <div class="input-group mb-2">
                <label for="nameCourse" class="col-4">Course title:</label>
                <InputText id="nameCourse" placeholder="Calculus Course 1..." class="form-control" @bind-Value="model.Course.Title" />
            </div>

            <div class="input-group mb-2 mb-md-0">
                <label for="password" class="col-4">Password (optional):</label>
                <InputText type="password" id="password" class="form-control" placeholder="Password" @bind-Value="model.Course.Password" />
            </div>
        </div>

        <div class="col-12 col-md-7 textarea-container">
            <label for="courseDescription" class="sr-only">Description</label>
            <InputTextArea id="courseDescription" class="form-control col-12" placeholder="Description" @bind-Value="model.Course.Description" />
        </div>
    </div>

    <div class="row mb-2">
        <div class="col-12">
            <label>Documents</label>

            <table class="col-12 add-elements">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Upload</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>

                    @foreach (CourseDocument document in model.CourseDocuments)
                    {
                        <tr>
                            <td>
                                <label for="titleDocument" class="sr-only">Title:</label>
                                <InputText id="titleDocument" class="form-control" placeholder="Enter title" @bind-Value="document.Title" />
                            </td>

                            <td>
                                <label for="fileDocument" class="sr-only">Document upload</label>
                                @* Normally we can choose many documents at the same time but we forbid it here *@
                                <InputFile id="fileDocument" class="document-upload" OnChange="@((IFileListEntry[] files) => HandleSelection(files, document))" />

                                <span>Loaded @((100.0 * position / size).ToString("0"))%</span>
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" aria-valuenow="70"
                                         aria-valuemin="0" aria-valuemax="100" style="width:70%">
                                        <span>Loaded @((100.0 * position / size).ToString("0"))%</span>
                                        <span class="sr-only">70% Complete</span>
                                    </div>
                                </div>
                            </td>

                            @if (model.CourseDocuments.Count > 1)
                            {
                                <td class="delete" @onclick="@(() => model.CourseDocuments.Remove(document))">
                                    <span class="oi oi-x" aria-hidden="true"></span>
                                </td>
                            }
                            else
                            {
                                <td></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>

            @* Disabling while something is already uploading *@
            <p class="mt-2 btn btn-add-element small @(addBtnDisabled ? "disabled-add-btn" : "")" @onclick="@(() => { if (!addBtnDisabled) model.CourseDocuments.Add(new CourseDocument()); })"><span class="oi oi-plus mr-1" aria-hidden="true"></span> Add document</p>
        </div>
    </div>
</EditForm>

@code {
    ApplicationUser currentUser;
    CourseCourseDocument model = new CourseCourseDocument();
    SlugHelper slugHelper = new SlugHelper();
    bool addBtnDisabled = false;
    bool uploading = false;

    [Parameter]
    public EventCallback<string> OnSubmitValidated { get; set; }

    protected override async void OnInitialized()
    {
        currentUser = await ApplicationUserService.GetCurrentUser();
    }

    private async Task HandleValidSubmit()
    {
        // Course
        model.Course.Slug = slugHelper.GenerateSlug(model.Course.Title);
        model.Course.CreationDate = DateTime.Now;
        model.Course.UpdateDate = DateTime.Now;
        model.Course.User = currentUser;

        await CourseService.CreateAsync(model.Course);

        // CourseDocument
        foreach (CourseDocument document in model.CourseDocuments)
        {
            document.FileUrl = "test";
            document.UploadDate = DateTime.Now;
            document.Course = model.Course;
            await CourseDocumentService.CreateAsync(document);
        }

        // Reset
        model = new CourseCourseDocument();

        // Notifier
        await OnSubmitValidated.InvokeAsync("The course <strong>" + model.Course.Title + "</strong> has been added to your courses!");
    }

    private string fileStatus;
    private long position;
    private long size;
    async Task HandleSelection(IFileListEntry[] files, CourseDocument document)
    {
        IFileListEntry file = files.FirstOrDefault();

        position = file.Data.Position;
        size = file.Size;

        if (file != null)
        {
            // Update the associated CourseDocument object
            document.File = file;

            // Uploading
            await FileUploadService.UploadAsync(file);
        }
    }
}
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="card-columns">
    @foreach (Course course in Courses)
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">@course.Title</h5>
                @if (!String.IsNullOrEmpty(course.Password))
                {
                    <span>Password required.</span>
                }
                <p class="small text-muted">Created on @course.CreationDate @(course.UpdateDate.ToShortDateString() != course.CreationDate.ToShortDateString() ? "(updated " + @course.UpdateDate + ")" : "")</p>
                <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
            </div>
            @if (course.Documents != null && course.Documents.Count > 0)
            {
                <ul class="list-group list-group-flush">
                    @foreach (CourseDocument document in course.Documents)
                    {
                        string link = "uploads/" + document.FileUrl;
                        <li class="list-group-item"><NavLink href="@link" target="_blank" title="Open this document" alt="Open this document"><span class="oi oi-document" aria-hidden="true"></span> @document.Title</NavLink></li>
                    }
                </ul>
            }
            <div class="card-body d-flex justify-content-between">
                @if (copiedLink == NavigationManager.Uri + "/" + course.Slug)
                {
                    <button class="btn btn-sm"><span class="oi oi-check" aria-hidden="true"></span> Link copied</button>
                }
                else
                {
                    <button class="btn btn-sm" @onclick="@(() => CopyTextToClipboard(NavigationManager.Uri + "/" + course.Slug))">Share link</button>
                }

                <div>
                    <button class="btn btn-sm">Edit</button>
                    <button class="btn btn-danger btn-sm">Delete</button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<Course> Courses { get; set; }

    private string copiedLink = null;

    private async Task CopyTextToClipboard(string link)
    {
        copiedLink = link;
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", link);
    }
}
